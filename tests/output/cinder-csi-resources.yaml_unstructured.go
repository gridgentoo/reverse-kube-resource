// Code generated by reverse-kube-resource. DO NOT EDIT.

package examples

import v1unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

var (
	// Unstructured "csi-cinder-controller-sa"
	csiCinderControllerSaUnstructuredServiceAccount = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "v1",
			"kind":       "ServiceAccount",
			"metadata": map[string]interface{}{
				"name":      "csi-cinder-controller-sa",
				"namespace": "kube-system",
			},
		},
	}

	// Unstructured "csi-cinder-node-sa"
	csiCinderNodeSaUnstructuredServiceAccount = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "v1",
			"kind":       "ServiceAccount",
			"metadata": map[string]interface{}{
				"name":      "csi-cinder-node-sa",
				"namespace": "kube-system",
			},
		},
	}

	// Unstructured "csi-cinder-sc-delete"
	csiCinderScDeleteUnstructuredStorageClass = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"allowVolumeExpansion": "true",
			"apiVersion":           "storage.k8s.io/v1",
			"kind":                 "StorageClass",
			"metadata": map[string]interface{}{
				"name": "csi-cinder-sc-delete",
			},
			"provisioner":   "cinder.csi.openstack.org",
			"reclaimPolicy": "Delete",
		},
	}

	// Unstructured "csi-cinder-sc-retain"
	csiCinderScRetainUnstructuredStorageClass = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"allowVolumeExpansion": "true",
			"apiVersion":           "storage.k8s.io/v1",
			"kind":                 "StorageClass",
			"metadata": map[string]interface{}{
				"name": "csi-cinder-sc-retain",
			},
			"provisioner":   "cinder.csi.openstack.org",
			"reclaimPolicy": "Retain",
		},
	}

	// Unstructured "csi-attacher-role"
	csiAttacherRoleUnstructuredClusterRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRole",
			"metadata": map[string]interface{}{
				"name": "csi-attacher-role",
			},
			"rules": "[map[apiGroups:[] resources:[persistentvolumes] verbs:[get list watch patch]] map[apiGroups:[storage.k8s.io] resources:[csinodes] verbs:[get list watch]] map[apiGroups:[storage.k8s.io] resources:[volumeattachments] verbs:[get list watch patch]] map[apiGroups:[storage.k8s.io] resources:[volumeattachments/status] verbs:[patch]]]",
		},
	}

	// Unstructured "csi-provisioner-role"
	csiProvisionerRoleUnstructuredClusterRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRole",
			"metadata": map[string]interface{}{
				"name": "csi-provisioner-role",
			},
			"rules": "[map[apiGroups:[] resources:[persistentvolumes] verbs:[get list watch create delete]] map[apiGroups:[] resources:[persistentvolumeclaims] verbs:[get list watch update]] map[apiGroups:[storage.k8s.io] resources:[storageclasses] verbs:[get list watch]] map[apiGroups:[] resources:[nodes] verbs:[get list watch]] map[apiGroups:[storage.k8s.io] resources:[csinodes] verbs:[get list watch]] map[apiGroups:[] resources:[events] verbs:[list watch create update patch]] map[apiGroups:[snapshot.storage.k8s.io] resources:[volumesnapshots] verbs:[get list]] map[apiGroups:[snapshot.storage.k8s.io] resources:[volumesnapshotcontents] verbs:[get list]]]",
		},
	}

	// Unstructured "csi-snapshotter-role"
	csiSnapshotterRoleUnstructuredClusterRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRole",
			"metadata": map[string]interface{}{
				"name": "csi-snapshotter-role",
			},
			"rules": "[map[apiGroups:[] resources:[events] verbs:[list watch create update patch]] map[apiGroups:[snapshot.storage.k8s.io] resources:[volumesnapshotclasses] verbs:[get list watch]] map[apiGroups:[snapshot.storage.k8s.io] resources:[volumesnapshotcontents] verbs:[create get list watch update delete]] map[apiGroups:[snapshot.storage.k8s.io] resources:[volumesnapshotcontents/status] verbs:[update]]]",
		},
	}

	// Unstructured "csi-resizer-role"
	csiResizerRoleUnstructuredClusterRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRole",
			"metadata": map[string]interface{}{
				"name": "csi-resizer-role",
			},
			"rules": "[map[apiGroups:[] resources:[persistentvolumes] verbs:[get list watch patch]] map[apiGroups:[] resources:[persistentvolumeclaims] verbs:[get list watch]] map[apiGroups:[] resources:[pods] verbs:[get list watch]] map[apiGroups:[] resources:[persistentvolumeclaims/status] verbs:[patch]] map[apiGroups:[] resources:[events] verbs:[list watch create update patch]]]",
		},
	}

	// Unstructured "csi-nodeplugin-role"
	csiNodepluginRoleUnstructuredClusterRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRole",
			"metadata": map[string]interface{}{
				"name": "csi-nodeplugin-role",
			},
			"rules": "[map[apiGroups:[] resources:[events] verbs:[get list watch create update patch]]]",
		},
	}

	// Unstructured "csi-attacher-binding"
	csiAttacherBindingUnstructuredClusterRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRoleBinding",
			"metadata": map[string]interface{}{
				"name": "csi-attacher-binding",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "ClusterRole",
				"name":     "csi-attacher-role",
			},
			"subjects": "[map[kind:ServiceAccount name:csi-cinder-controller-sa namespace:kube-system]]",
		},
	}

	// Unstructured "csi-provisioner-binding"
	csiProvisionerBindingUnstructuredClusterRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRoleBinding",
			"metadata": map[string]interface{}{
				"name": "csi-provisioner-binding",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "ClusterRole",
				"name":     "csi-provisioner-role",
			},
			"subjects": "[map[kind:ServiceAccount name:csi-cinder-controller-sa namespace:kube-system]]",
		},
	}

	// Unstructured "csi-snapshotter-binding"
	csiSnapshotterBindingUnstructuredClusterRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRoleBinding",
			"metadata": map[string]interface{}{
				"name": "csi-snapshotter-binding",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "ClusterRole",
				"name":     "csi-snapshotter-role",
			},
			"subjects": "[map[kind:ServiceAccount name:csi-cinder-controller-sa namespace:kube-system]]",
		},
	}

	// Unstructured "csi-resizer-binding"
	csiResizerBindingUnstructuredClusterRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRoleBinding",
			"metadata": map[string]interface{}{
				"name": "csi-resizer-binding",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "ClusterRole",
				"name":     "csi-resizer-role",
			},
			"subjects": "[map[kind:ServiceAccount name:csi-cinder-controller-sa namespace:kube-system]]",
		},
	}

	// Unstructured "csi-nodeplugin-binding"
	csiNodepluginBindingUnstructuredClusterRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRoleBinding",
			"metadata": map[string]interface{}{
				"name": "csi-nodeplugin-binding",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "ClusterRole",
				"name":     "csi-nodeplugin-role",
			},
			"subjects": "[map[kind:ServiceAccount name:csi-cinder-node-sa namespace:kube-system]]",
		},
	}

	// Unstructured "external-resizer-cfg"
	externalResizerCfgUnstructuredRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "Role",
			"metadata": map[string]interface{}{
				"name":      "external-resizer-cfg",
				"namespace": "kube-system",
			},
			"rules": "[map[apiGroups:[coordination.k8s.io] resources:[leases] verbs:[get watch list delete update create]]]",
		},
	}

	// Unstructured "csi-resizer-role-cfg"
	csiResizerRoleCfgUnstructuredRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "RoleBinding",
			"metadata": map[string]interface{}{
				"name":      "csi-resizer-role-cfg",
				"namespace": "kube-system",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "Role",
				"name":     "external-resizer-cfg",
			},
			"subjects": "[map[kind:ServiceAccount name:csi-cinder-controller-sa namespace:kube-system]]",
		},
	}

	// Unstructured "openstack-cinder-csi-controllerplugin"
	openstackCinderCsiControllerpluginUnstructuredService = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "v1",
			"kind":       "Service",
			"metadata": map[string]interface{}{
				"labels": map[string]interface{}{
					"app":       "openstack-cinder-csi",
					"chart":     "openstack-cinder-csi-1.3.8",
					"component": "controllerplugin",
					"heritage":  "Helm",
					"release":   "cinder-csi",
				},
				"name": "openstack-cinder-csi-controllerplugin",
			},
			"spec": map[string]interface{}{
				"clusterIP": "None",
			},
		},
	}

	// Unstructured "openstack-cinder-csi-nodeplugin"
	openstackCinderCsiNodepluginUnstructuredDaemonSet = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "apps/v1",
			"kind":       "DaemonSet",
			"metadata": map[string]interface{}{
				"labels": map[string]interface{}{
					"app":       "openstack-cinder-csi",
					"chart":     "openstack-cinder-csi-1.3.8",
					"component": "nodeplugin",
					"heritage":  "Helm",
					"release":   "cinder-csi",
				},
				"name": "openstack-cinder-csi-nodeplugin",
			},
			"spec": map[string]interface{}{
				"selector": map[string]interface{}{
					"matchLabels": map[string]interface{}{
						"app":       "openstack-cinder-csi",
						"component": "nodeplugin",
						"release":   "cinder-csi",
					},
				},
				"template": map[string]interface{}{
					"metadata": map[string]interface{}{
						"labels": map[string]interface{}{
							"app":       "openstack-cinder-csi",
							"chart":     "openstack-cinder-csi-1.3.8",
							"component": "nodeplugin",
							"heritage":  "Helm",
							"release":   "cinder-csi",
						},
					},
					"spec": map[string]interface{}{
						"containers":     "[map[args:[--csi-address=$(ADDRESS) --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)] env:[map[name:ADDRESS value:/csi/csi.sock] map[name:DRIVER_REG_SOCK_PATH value:/var/lib/kubelet/plugins/cinder.csi.openstack.org/csi.sock] map[name:KUBE_NODE_NAME valueFrom:map[fieldRef:map[fieldPath:spec.nodeName]]]] image:k8s.gcr.io/sig-storage/csi-node-driver-registrar:v1.3.0 imagePullPolicy:IfNotPresent lifecycle:map[preStop:map[exec:map[command:[/bin/sh -c rm -rf /registration/cinder.csi.openstack.org /registration/cinder.csi.openstack.org-reg.sock]]]] name:node-driver-registrar volumeMounts:[map[mountPath:/csi name:socket-dir] map[mountPath:/registration name:registration-dir]]] map[args:[--csi-address=/csi/csi.sock] image:k8s.gcr.io/sig-storage/livenessprobe:v2.1.0 imagePullPolicy:IfNotPresent name:liveness-probe volumeMounts:[map[mountPath:/csi name:socket-dir]]] map[args:[/bin/cinder-csi-plugin --nodeid=$(NODE_ID) --endpoint=$(CSI_ENDPOINT) --cloud-config=$(CLOUD_CONFIG)] env:[map[name:NODE_ID valueFrom:map[fieldRef:map[fieldPath:spec.nodeName]]] map[name:CSI_ENDPOINT value:unix://csi/csi.sock] map[name:CLOUD_CONFIG value:/etc/kubernetes/cloud-config]] image:docker.io/k8scloudprovider/cinder-csi-plugin:v1.21.0 imagePullPolicy:IfNotPresent livenessProbe:map[failureThreshold:5 httpGet:map[path:/healthz port:healthz] initialDelaySeconds:10 periodSeconds:60 timeoutSeconds:10] name:cinder-csi-plugin ports:[map[containerPort:9808 name:healthz protocol:TCP]] securityContext:map[allowPrivilegeEscalation:true capabilities:map[add:[SYS_ADMIN]] privileged:true] volumeMounts:[map[mountPath:/csi name:socket-dir] map[mountPath:/var/lib/kubelet mountPropagation:Bidirectional name:kubelet-dir] map[mountPath:/dev mountPropagation:HostToContainer name:pods-probe-dir] map[mountPath:/etc/cacert name:cacert readOnly:true] map[mountPath:/etc/kubernetes name:cloud-config readOnly:true]]]]",
						"hostNetwork":    "true",
						"serviceAccount": "csi-cinder-node-sa",
						"tolerations":    "[map[operator:Exists]]",
						"volumes":        "[map[hostPath:map[path:/var/lib/kubelet/plugins/cinder.csi.openstack.org type:DirectoryOrCreate] name:socket-dir] map[hostPath:map[path:/var/lib/kubelet/plugins_registry/ type:Directory] name:registration-dir] map[hostPath:map[path:/var/lib/kubelet type:Directory] name:kubelet-dir] map[hostPath:map[path:/dev type:Directory] name:pods-probe-dir] map[hostPath:map[path:/etc/kubernetes] name:cloud-config] map[hostPath:map[path:/etc/cacert] name:cacert]]",
					},
				},
			},
		},
	}

	// Unstructured "openstack-cinder-csi-controllerplugin"
	openstackCinderCsiControllerpluginUnstructuredStatefulSet = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "apps/v1",
			"kind":       "StatefulSet",
			"metadata": map[string]interface{}{
				"labels": map[string]interface{}{
					"app":       "openstack-cinder-csi",
					"chart":     "openstack-cinder-csi-1.3.8",
					"component": "controllerplugin",
					"heritage":  "Helm",
					"release":   "cinder-csi",
				},
				"name": "openstack-cinder-csi-controllerplugin",
			},
			"spec": map[string]interface{}{
				"replicas": "1",
				"selector": map[string]interface{}{
					"matchLabels": map[string]interface{}{
						"app":       "openstack-cinder-csi",
						"component": "controllerplugin",
						"release":   "cinder-csi",
					},
				},
				"serviceName": "openstack-cinder-csi-controllerplugin",
				"template": map[string]interface{}{
					"metadata": map[string]interface{}{
						"labels": map[string]interface{}{
							"app":       "openstack-cinder-csi",
							"chart":     "openstack-cinder-csi-1.3.8",
							"component": "controllerplugin",
							"heritage":  "Helm",
							"release":   "cinder-csi",
						},
					},
					"spec": map[string]interface{}{
						"containers":     "[map[args:[--csi-address=$(ADDRESS) --timeout=3m] env:[map[name:ADDRESS value:/var/lib/csi/sockets/pluginproxy/csi.sock]] image:k8s.gcr.io/sig-storage/csi-attacher:v3.1.0 imagePullPolicy:IfNotPresent name:csi-attacher volumeMounts:[map[mountPath:/var/lib/csi/sockets/pluginproxy/ name:socket-dir]]] map[args:[--csi-address=$(ADDRESS) --timeout=3m --default-fstype=ext4 --feature-gates=Topology=true --extra-create-metadata] env:[map[name:ADDRESS value:/var/lib/csi/sockets/pluginproxy/csi.sock]] image:k8s.gcr.io/sig-storage/csi-provisioner:v2.1.1 imagePullPolicy:IfNotPresent name:csi-provisioner volumeMounts:[map[mountPath:/var/lib/csi/sockets/pluginproxy/ name:socket-dir]]] map[args:[--csi-address=$(ADDRESS) --timeout=3m] env:[map[name:ADDRESS value:/var/lib/csi/sockets/pluginproxy/csi.sock]] image:k8s.gcr.io/sig-storage/csi-snapshotter:v2.1.3 imagePullPolicy:IfNotPresent name:csi-snapshotter volumeMounts:[map[mountPath:/var/lib/csi/sockets/pluginproxy/ name:socket-dir]]] map[args:[--csi-address=$(ADDRESS) --timeout=3m --handle-volume-inuse-error=false] env:[map[name:ADDRESS value:/var/lib/csi/sockets/pluginproxy/csi.sock]] image:k8s.gcr.io/sig-storage/csi-resizer:v1.1.0 imagePullPolicy:IfNotPresent name:csi-resizer volumeMounts:[map[mountPath:/var/lib/csi/sockets/pluginproxy/ name:socket-dir]]] map[args:[--csi-address=$(ADDRESS)] env:[map[name:ADDRESS value:/var/lib/csi/sockets/pluginproxy/csi.sock]] image:k8s.gcr.io/sig-storage/livenessprobe:v2.1.0 imagePullPolicy:IfNotPresent name:liveness-probe volumeMounts:[map[mountPath:/var/lib/csi/sockets/pluginproxy/ name:socket-dir]]] map[args:[/bin/cinder-csi-plugin --nodeid=$(NODE_ID) --endpoint=$(CSI_ENDPOINT) --cloud-config=$(CLOUD_CONFIG) --cluster=$(CLUSTER_NAME)] env:[map[name:NODE_ID valueFrom:map[fieldRef:map[fieldPath:spec.nodeName]]] map[name:CSI_ENDPOINT value:unix://csi/csi.sock] map[name:CLOUD_CONFIG value:/etc/kubernetes/cloud-config] map[name:CLUSTER_NAME value:kubernetes]] image:docker.io/k8scloudprovider/cinder-csi-plugin:v1.21.0 imagePullPolicy:IfNotPresent livenessProbe:map[failureThreshold:5 httpGet:map[path:/healthz port:healthz] initialDelaySeconds:10 periodSeconds:60 timeoutSeconds:10] name:cinder-csi-plugin ports:[map[containerPort:9808 name:healthz protocol:TCP]] volumeMounts:[map[mountPath:/csi name:socket-dir] map[mountPath:/etc/cacert name:cacert readOnly:true] map[mountPath:/etc/kubernetes name:cloud-config readOnly:true]]]]",
						"serviceAccount": "csi-cinder-controller-sa",
						"volumes":        "[map[emptyDir:<nil> name:socket-dir] map[hostPath:map[path:/etc/kubernetes] name:cloud-config] map[hostPath:map[path:/etc/cacert] name:cacert]]",
					},
				},
			},
		},
	}

	// Unstructured "cinder.csi.openstack.org"
	cinderCsiOpenstackOrgUnstructuredCSIDriver = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "storage.k8s.io/v1",
			"kind":       "CSIDriver",
			"metadata": map[string]interface{}{
				"name": "cinder.csi.openstack.org",
			},
			"spec": map[string]interface{}{
				"attachRequired":       "true",
				"podInfoOnMount":       "true",
				"volumeLifecycleModes": "[Persistent Ephemeral]",
			},
		},
	}
)
