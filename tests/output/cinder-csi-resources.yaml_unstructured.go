// Code generated by reverse-kube-resource. DO NOT EDIT.

package examples

import v1unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

var (
	// Unstructured "csi-cinder-controller-sa"
	csiCinderControllerSaUnstructuredServiceAccount = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "v1",
			"kind":       "ServiceAccount",
			"metadata": map[string]interface{}{
				"name":      "csi-cinder-controller-sa",
				"namespace": "kube-system",
			},
		},
	}

	// Unstructured "csi-cinder-node-sa"
	csiCinderNodeSaUnstructuredServiceAccount = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "v1",
			"kind":       "ServiceAccount",
			"metadata": map[string]interface{}{
				"name":      "csi-cinder-node-sa",
				"namespace": "kube-system",
			},
		},
	}

	// Unstructured "csi-cinder-sc-delete"
	csiCinderScDeleteUnstructuredStorageClass = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"allowVolumeExpansion": true,
			"apiVersion":           "storage.k8s.io/v1",
			"kind":                 "StorageClass",
			"metadata": map[string]interface{}{
				"name": "csi-cinder-sc-delete",
			},
			"provisioner":   "cinder.csi.openstack.org",
			"reclaimPolicy": "Delete",
		},
	}

	// Unstructured "csi-cinder-sc-retain"
	csiCinderScRetainUnstructuredStorageClass = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"allowVolumeExpansion": true,
			"apiVersion":           "storage.k8s.io/v1",
			"kind":                 "StorageClass",
			"metadata": map[string]interface{}{
				"name": "csi-cinder-sc-retain",
			},
			"provisioner":   "cinder.csi.openstack.org",
			"reclaimPolicy": "Retain",
		},
	}

	// Unstructured "csi-attacher-role"
	csiAttacherRoleUnstructuredClusterRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRole",
			"metadata": map[string]interface{}{
				"name": "csi-attacher-role",
			},
			"rules": []interface{}{
				map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"persistentvolumes",
					},
					"verbs": []interface{}{
						"get", "list", "watch", "patch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"storage.k8s.io",
					},
					"resources": []interface{}{
						"csinodes",
					},
					"verbs": []interface{}{
						"get", "list", "watch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"storage.k8s.io",
					},
					"resources": []interface{}{
						"volumeattachments",
					},
					"verbs": []interface{}{
						"get", "list", "watch", "patch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"storage.k8s.io",
					},
					"resources": []interface{}{
						"volumeattachments/status",
					},
					"verbs": []interface{}{
						"patch",
					},
				},
			},
		},
	}

	// Unstructured "csi-provisioner-role"
	csiProvisionerRoleUnstructuredClusterRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRole",
			"metadata": map[string]interface{}{
				"name": "csi-provisioner-role",
			},
			"rules": []interface{}{
				map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"persistentvolumes",
					},
					"verbs": []interface{}{
						"get", "list", "watch", "create", "delete",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"persistentvolumeclaims",
					},
					"verbs": []interface{}{
						"get", "list", "watch", "update",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"storage.k8s.io",
					},
					"resources": []interface{}{
						"storageclasses",
					},
					"verbs": []interface{}{
						"get", "list", "watch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"nodes",
					},
					"verbs": []interface{}{
						"get", "list", "watch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"storage.k8s.io",
					},
					"resources": []interface{}{
						"csinodes",
					},
					"verbs": []interface{}{
						"get", "list", "watch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"events",
					},
					"verbs": []interface{}{
						"list", "watch", "create", "update", "patch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"snapshot.storage.k8s.io",
					},
					"resources": []interface{}{
						"volumesnapshots",
					},
					"verbs": []interface{}{
						"get", "list",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"snapshot.storage.k8s.io",
					},
					"resources": []interface{}{
						"volumesnapshotcontents",
					},
					"verbs": []interface{}{
						"get", "list",
					},
				},
			},
		},
	}

	// Unstructured "csi-snapshotter-role"
	csiSnapshotterRoleUnstructuredClusterRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRole",
			"metadata": map[string]interface{}{
				"name": "csi-snapshotter-role",
			},
			"rules": []interface{}{
				map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"events",
					},
					"verbs": []interface{}{
						"list", "watch", "create", "update", "patch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"snapshot.storage.k8s.io",
					},
					"resources": []interface{}{
						"volumesnapshotclasses",
					},
					"verbs": []interface{}{
						"get", "list", "watch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"snapshot.storage.k8s.io",
					},
					"resources": []interface{}{
						"volumesnapshotcontents",
					},
					"verbs": []interface{}{
						"create", "get", "list", "watch", "update", "delete",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"snapshot.storage.k8s.io",
					},
					"resources": []interface{}{
						"volumesnapshotcontents/status",
					},
					"verbs": []interface{}{
						"update",
					},
				},
			},
		},
	}

	// Unstructured "csi-resizer-role"
	csiResizerRoleUnstructuredClusterRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRole",
			"metadata": map[string]interface{}{
				"name": "csi-resizer-role",
			},
			"rules": []interface{}{
				map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"persistentvolumes",
					},
					"verbs": []interface{}{
						"get", "list", "watch", "patch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"persistentvolumeclaims",
					},
					"verbs": []interface{}{
						"get", "list", "watch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"pods",
					},
					"verbs": []interface{}{
						"get", "list", "watch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"persistentvolumeclaims/status",
					},
					"verbs": []interface{}{
						"patch",
					},
				}, map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"events",
					},
					"verbs": []interface{}{
						"list", "watch", "create", "update", "patch",
					},
				},
			},
		},
	}

	// Unstructured "csi-nodeplugin-role"
	csiNodepluginRoleUnstructuredClusterRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRole",
			"metadata": map[string]interface{}{
				"name": "csi-nodeplugin-role",
			},
			"rules": []interface{}{
				map[string]interface{}{
					"apiGroups": []interface{}{
						"",
					},
					"resources": []interface{}{
						"events",
					},
					"verbs": []interface{}{
						"get", "list", "watch", "create", "update", "patch",
					},
				},
			},
		},
	}

	// Unstructured "csi-attacher-binding"
	csiAttacherBindingUnstructuredClusterRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRoleBinding",
			"metadata": map[string]interface{}{
				"name": "csi-attacher-binding",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "ClusterRole",
				"name":     "csi-attacher-role",
			},
			"subjects": []interface{}{
				map[string]interface{}{
					"kind":      "ServiceAccount",
					"name":      "csi-cinder-controller-sa",
					"namespace": "kube-system",
				},
			},
		},
	}

	// Unstructured "csi-provisioner-binding"
	csiProvisionerBindingUnstructuredClusterRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRoleBinding",
			"metadata": map[string]interface{}{
				"name": "csi-provisioner-binding",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "ClusterRole",
				"name":     "csi-provisioner-role",
			},
			"subjects": []interface{}{
				map[string]interface{}{
					"kind":      "ServiceAccount",
					"name":      "csi-cinder-controller-sa",
					"namespace": "kube-system",
				},
			},
		},
	}

	// Unstructured "csi-snapshotter-binding"
	csiSnapshotterBindingUnstructuredClusterRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRoleBinding",
			"metadata": map[string]interface{}{
				"name": "csi-snapshotter-binding",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "ClusterRole",
				"name":     "csi-snapshotter-role",
			},
			"subjects": []interface{}{
				map[string]interface{}{
					"kind":      "ServiceAccount",
					"name":      "csi-cinder-controller-sa",
					"namespace": "kube-system",
				},
			},
		},
	}

	// Unstructured "csi-resizer-binding"
	csiResizerBindingUnstructuredClusterRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRoleBinding",
			"metadata": map[string]interface{}{
				"name": "csi-resizer-binding",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "ClusterRole",
				"name":     "csi-resizer-role",
			},
			"subjects": []interface{}{
				map[string]interface{}{
					"kind":      "ServiceAccount",
					"name":      "csi-cinder-controller-sa",
					"namespace": "kube-system",
				},
			},
		},
	}

	// Unstructured "csi-nodeplugin-binding"
	csiNodepluginBindingUnstructuredClusterRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "ClusterRoleBinding",
			"metadata": map[string]interface{}{
				"name": "csi-nodeplugin-binding",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "ClusterRole",
				"name":     "csi-nodeplugin-role",
			},
			"subjects": []interface{}{
				map[string]interface{}{
					"kind":      "ServiceAccount",
					"name":      "csi-cinder-node-sa",
					"namespace": "kube-system",
				},
			},
		},
	}

	// Unstructured "external-resizer-cfg"
	externalResizerCfgUnstructuredRole = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "Role",
			"metadata": map[string]interface{}{
				"name":      "external-resizer-cfg",
				"namespace": "kube-system",
			},
			"rules": []interface{}{
				map[string]interface{}{
					"apiGroups": []interface{}{
						"coordination.k8s.io",
					},
					"resources": []interface{}{
						"leases",
					},
					"verbs": []interface{}{
						"get", "watch", "list", "delete", "update", "create",
					},
				},
			},
		},
	}

	// Unstructured "csi-resizer-role-cfg"
	csiResizerRoleCfgUnstructuredRoleBinding = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "rbac.authorization.k8s.io/v1",
			"kind":       "RoleBinding",
			"metadata": map[string]interface{}{
				"name":      "csi-resizer-role-cfg",
				"namespace": "kube-system",
			},
			"roleRef": map[string]interface{}{
				"apiGroup": "rbac.authorization.k8s.io",
				"kind":     "Role",
				"name":     "external-resizer-cfg",
			},
			"subjects": []interface{}{
				map[string]interface{}{
					"kind":      "ServiceAccount",
					"name":      "csi-cinder-controller-sa",
					"namespace": "kube-system",
				},
			},
		},
	}

	// Unstructured "openstack-cinder-csi-controllerplugin"
	openstackCinderCsiControllerpluginUnstructuredService = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "v1",
			"kind":       "Service",
			"metadata": map[string]interface{}{
				"labels": map[string]interface{}{
					"app":       "openstack-cinder-csi",
					"chart":     "openstack-cinder-csi-1.3.8",
					"component": "controllerplugin",
					"heritage":  "Helm",
					"release":   "cinder-csi",
				},
				"name": "openstack-cinder-csi-controllerplugin",
			},
			"spec": map[string]interface{}{
				"clusterIP": "None",
			},
		},
	}

	// Unstructured "openstack-cinder-csi-nodeplugin"
	openstackCinderCsiNodepluginUnstructuredDaemonSet = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "apps/v1",
			"kind":       "DaemonSet",
			"metadata": map[string]interface{}{
				"labels": map[string]interface{}{
					"app":       "openstack-cinder-csi",
					"chart":     "openstack-cinder-csi-1.3.8",
					"component": "nodeplugin",
					"heritage":  "Helm",
					"release":   "cinder-csi",
				},
				"name": "openstack-cinder-csi-nodeplugin",
			},
			"spec": map[string]interface{}{
				"selector": map[string]interface{}{
					"matchLabels": map[string]interface{}{
						"app":       "openstack-cinder-csi",
						"component": "nodeplugin",
						"release":   "cinder-csi",
					},
				},
				"template": map[string]interface{}{
					"metadata": map[string]interface{}{
						"labels": map[string]interface{}{
							"app":       "openstack-cinder-csi",
							"chart":     "openstack-cinder-csi-1.3.8",
							"component": "nodeplugin",
							"heritage":  "Helm",
							"release":   "cinder-csi",
						},
					},
					"spec": map[string]interface{}{
						"containers": []interface{}{
							map[string]interface{}{
								"args": []interface{}{
									"--csi-address=$(ADDRESS)", "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)",
								},
								"env": []interface{}{
									map[string]interface{}{
										"name":  "ADDRESS",
										"value": "/csi/csi.sock",
									}, map[string]interface{}{
										"name":  "DRIVER_REG_SOCK_PATH",
										"value": "/var/lib/kubelet/plugins/cinder.csi.openstack.org/csi.sock",
									}, map[string]interface{}{
										"name": "KUBE_NODE_NAME",
										"valueFrom": map[string]interface{}{
											"fieldRef": map[string]interface{}{
												"fieldPath": "spec.nodeName",
											},
										},
									},
								},
								"image":           "k8s.gcr.io/sig-storage/csi-node-driver-registrar:v1.3.0",
								"imagePullPolicy": "IfNotPresent",
								"lifecycle": map[string]interface{}{
									"preStop": map[string]interface{}{
										"exec": map[string]interface{}{
											"command": []interface{}{
												"/bin/sh", "-c", "rm -rf /registration/cinder.csi.openstack.org /registration/cinder.csi.openstack.org-reg.sock",
											},
										},
									},
								},
								"name": "node-driver-registrar",
								"volumeMounts": []interface{}{
									map[string]interface{}{
										"mountPath": "/csi",
										"name":      "socket-dir",
									}, map[string]interface{}{
										"mountPath": "/registration",
										"name":      "registration-dir",
									},
								},
							}, map[string]interface{}{
								"args": []interface{}{
									"--csi-address=/csi/csi.sock",
								},
								"image":           "k8s.gcr.io/sig-storage/livenessprobe:v2.1.0",
								"imagePullPolicy": "IfNotPresent",
								"name":            "liveness-probe",
								"volumeMounts": []interface{}{
									map[string]interface{}{
										"mountPath": "/csi",
										"name":      "socket-dir",
									},
								},
							}, map[string]interface{}{
								"args": []interface{}{
									"/bin/cinder-csi-plugin", "--nodeid=$(NODE_ID)", "--endpoint=$(CSI_ENDPOINT)", "--cloud-config=$(CLOUD_CONFIG)",
								},
								"env": []interface{}{
									map[string]interface{}{
										"name": "NODE_ID",
										"valueFrom": map[string]interface{}{
											"fieldRef": map[string]interface{}{
												"fieldPath": "spec.nodeName",
											},
										},
									}, map[string]interface{}{
										"name":  "CSI_ENDPOINT",
										"value": "unix://csi/csi.sock",
									}, map[string]interface{}{
										"name":  "CLOUD_CONFIG",
										"value": "/etc/kubernetes/cloud-config",
									},
								},
								"image":           "docker.io/k8scloudprovider/cinder-csi-plugin:v1.21.0",
								"imagePullPolicy": "IfNotPresent",
								"livenessProbe": map[string]interface{}{
									"failureThreshold": 5,
									"httpGet": map[string]interface{}{
										"path": "/healthz",
										"port": "healthz",
									},
									"initialDelaySeconds": 10,
									"periodSeconds":       60,
									"timeoutSeconds":      10,
								},
								"name": "cinder-csi-plugin",
								"ports": []interface{}{
									map[string]interface{}{
										"containerPort": 9808,
										"name":          "healthz",
										"protocol":      "TCP",
									},
								},
								"securityContext": map[string]interface{}{
									"allowPrivilegeEscalation": true,
									"capabilities": map[string]interface{}{
										"add": []interface{}{
											"SYS_ADMIN",
										},
									},
									"privileged": true,
								},
								"volumeMounts": []interface{}{
									map[string]interface{}{
										"mountPath": "/csi",
										"name":      "socket-dir",
									}, map[string]interface{}{
										"mountPath":        "/var/lib/kubelet",
										"mountPropagation": "Bidirectional",
										"name":             "kubelet-dir",
									}, map[string]interface{}{
										"mountPath":        "/dev",
										"mountPropagation": "HostToContainer",
										"name":             "pods-probe-dir",
									}, map[string]interface{}{
										"mountPath": "/etc/cacert",
										"name":      "cacert",
										"readOnly":  true,
									}, map[string]interface{}{
										"mountPath": "/etc/kubernetes",
										"name":      "cloud-config",
										"readOnly":  true,
									},
								},
							},
						},
						"hostNetwork":    true,
						"serviceAccount": "csi-cinder-node-sa",
						"tolerations": []interface{}{
							map[string]interface{}{
								"operator": "Exists",
							},
						},
						"volumes": []interface{}{
							map[string]interface{}{
								"hostPath": map[string]interface{}{
									"path": "/var/lib/kubelet/plugins/cinder.csi.openstack.org",
									"type": "DirectoryOrCreate",
								},
								"name": "socket-dir",
							}, map[string]interface{}{
								"hostPath": map[string]interface{}{
									"path": "/var/lib/kubelet/plugins_registry/",
									"type": "Directory",
								},
								"name": "registration-dir",
							}, map[string]interface{}{
								"hostPath": map[string]interface{}{
									"path": "/var/lib/kubelet",
									"type": "Directory",
								},
								"name": "kubelet-dir",
							}, map[string]interface{}{
								"hostPath": map[string]interface{}{
									"path": "/dev",
									"type": "Directory",
								},
								"name": "pods-probe-dir",
							}, map[string]interface{}{
								"hostPath": map[string]interface{}{
									"path": "/etc/kubernetes",
								},
								"name": "cloud-config",
							}, map[string]interface{}{
								"hostPath": map[string]interface{}{
									"path": "/etc/cacert",
								},
								"name": "cacert",
							},
						},
					},
				},
			},
		},
	}

	// Unstructured "openstack-cinder-csi-controllerplugin"
	openstackCinderCsiControllerpluginUnstructuredStatefulSet = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "apps/v1",
			"kind":       "StatefulSet",
			"metadata": map[string]interface{}{
				"labels": map[string]interface{}{
					"app":       "openstack-cinder-csi",
					"chart":     "openstack-cinder-csi-1.3.8",
					"component": "controllerplugin",
					"heritage":  "Helm",
					"release":   "cinder-csi",
				},
				"name": "openstack-cinder-csi-controllerplugin",
			},
			"spec": map[string]interface{}{
				"replicas": 1,
				"selector": map[string]interface{}{
					"matchLabels": map[string]interface{}{
						"app":       "openstack-cinder-csi",
						"component": "controllerplugin",
						"release":   "cinder-csi",
					},
				},
				"serviceName": "openstack-cinder-csi-controllerplugin",
				"template": map[string]interface{}{
					"metadata": map[string]interface{}{
						"labels": map[string]interface{}{
							"app":       "openstack-cinder-csi",
							"chart":     "openstack-cinder-csi-1.3.8",
							"component": "controllerplugin",
							"heritage":  "Helm",
							"release":   "cinder-csi",
						},
					},
					"spec": map[string]interface{}{
						"containers": []interface{}{
							map[string]interface{}{
								"args": []interface{}{
									"--csi-address=$(ADDRESS)", "--timeout=3m",
								},
								"env": []interface{}{
									map[string]interface{}{
										"name":  "ADDRESS",
										"value": "/var/lib/csi/sockets/pluginproxy/csi.sock",
									},
								},
								"image":           "k8s.gcr.io/sig-storage/csi-attacher:v3.1.0",
								"imagePullPolicy": "IfNotPresent",
								"name":            "csi-attacher",
								"volumeMounts": []interface{}{
									map[string]interface{}{
										"mountPath": "/var/lib/csi/sockets/pluginproxy/",
										"name":      "socket-dir",
									},
								},
							}, map[string]interface{}{
								"args": []interface{}{
									"--csi-address=$(ADDRESS)", "--timeout=3m", "--default-fstype=ext4", "--feature-gates=Topology=true", "--extra-create-metadata",
								},
								"env": []interface{}{
									map[string]interface{}{
										"name":  "ADDRESS",
										"value": "/var/lib/csi/sockets/pluginproxy/csi.sock",
									},
								},
								"image":           "k8s.gcr.io/sig-storage/csi-provisioner:v2.1.1",
								"imagePullPolicy": "IfNotPresent",
								"name":            "csi-provisioner",
								"volumeMounts": []interface{}{
									map[string]interface{}{
										"mountPath": "/var/lib/csi/sockets/pluginproxy/",
										"name":      "socket-dir",
									},
								},
							}, map[string]interface{}{
								"args": []interface{}{
									"--csi-address=$(ADDRESS)", "--timeout=3m",
								},
								"env": []interface{}{
									map[string]interface{}{
										"name":  "ADDRESS",
										"value": "/var/lib/csi/sockets/pluginproxy/csi.sock",
									},
								},
								"image":           "k8s.gcr.io/sig-storage/csi-snapshotter:v2.1.3",
								"imagePullPolicy": "IfNotPresent",
								"name":            "csi-snapshotter",
								"volumeMounts": []interface{}{
									map[string]interface{}{
										"mountPath": "/var/lib/csi/sockets/pluginproxy/",
										"name":      "socket-dir",
									},
								},
							}, map[string]interface{}{
								"args": []interface{}{
									"--csi-address=$(ADDRESS)", "--timeout=3m", "--handle-volume-inuse-error=false",
								},
								"env": []interface{}{
									map[string]interface{}{
										"name":  "ADDRESS",
										"value": "/var/lib/csi/sockets/pluginproxy/csi.sock",
									},
								},
								"image":           "k8s.gcr.io/sig-storage/csi-resizer:v1.1.0",
								"imagePullPolicy": "IfNotPresent",
								"name":            "csi-resizer",
								"volumeMounts": []interface{}{
									map[string]interface{}{
										"mountPath": "/var/lib/csi/sockets/pluginproxy/",
										"name":      "socket-dir",
									},
								},
							}, map[string]interface{}{
								"args": []interface{}{
									"--csi-address=$(ADDRESS)",
								},
								"env": []interface{}{
									map[string]interface{}{
										"name":  "ADDRESS",
										"value": "/var/lib/csi/sockets/pluginproxy/csi.sock",
									},
								},
								"image":           "k8s.gcr.io/sig-storage/livenessprobe:v2.1.0",
								"imagePullPolicy": "IfNotPresent",
								"name":            "liveness-probe",
								"volumeMounts": []interface{}{
									map[string]interface{}{
										"mountPath": "/var/lib/csi/sockets/pluginproxy/",
										"name":      "socket-dir",
									},
								},
							}, map[string]interface{}{
								"args": []interface{}{
									"/bin/cinder-csi-plugin", "--nodeid=$(NODE_ID)", "--endpoint=$(CSI_ENDPOINT)", "--cloud-config=$(CLOUD_CONFIG)", "--cluster=$(CLUSTER_NAME)",
								},
								"env": []interface{}{
									map[string]interface{}{
										"name": "NODE_ID",
										"valueFrom": map[string]interface{}{
											"fieldRef": map[string]interface{}{
												"fieldPath": "spec.nodeName",
											},
										},
									}, map[string]interface{}{
										"name":  "CSI_ENDPOINT",
										"value": "unix://csi/csi.sock",
									}, map[string]interface{}{
										"name":  "CLOUD_CONFIG",
										"value": "/etc/kubernetes/cloud-config",
									}, map[string]interface{}{
										"name":  "CLUSTER_NAME",
										"value": "kubernetes",
									},
								},
								"image":           "docker.io/k8scloudprovider/cinder-csi-plugin:v1.21.0",
								"imagePullPolicy": "IfNotPresent",
								"livenessProbe": map[string]interface{}{
									"failureThreshold": 5,
									"httpGet": map[string]interface{}{
										"path": "/healthz",
										"port": "healthz",
									},
									"initialDelaySeconds": 10,
									"periodSeconds":       60,
									"timeoutSeconds":      10,
								},
								"name": "cinder-csi-plugin",
								"ports": []interface{}{
									map[string]interface{}{
										"containerPort": 9808,
										"name":          "healthz",
										"protocol":      "TCP",
									},
								},
								"volumeMounts": []interface{}{
									map[string]interface{}{
										"mountPath": "/csi",
										"name":      "socket-dir",
									}, map[string]interface{}{
										"mountPath": "/etc/cacert",
										"name":      "cacert",
										"readOnly":  true,
									}, map[string]interface{}{
										"mountPath": "/etc/kubernetes",
										"name":      "cloud-config",
										"readOnly":  true,
									},
								},
							},
						},
						"serviceAccount": "csi-cinder-controller-sa",
						"volumes": []interface{}{
							map[string]interface{}{
								"name": "socket-dir",
							}, map[string]interface{}{
								"hostPath": map[string]interface{}{
									"path": "/etc/kubernetes",
								},
								"name": "cloud-config",
							}, map[string]interface{}{
								"hostPath": map[string]interface{}{
									"path": "/etc/cacert",
								},
								"name": "cacert",
							},
						},
					},
				},
			},
		},
	}

	// Unstructured "cinder.csi.openstack.org"
	cinderCsiOpenstackOrgUnstructuredCSIDriver = v1unstructured.Unstructured{
		Object: map[string]interface{}{
			"apiVersion": "storage.k8s.io/v1",
			"kind":       "CSIDriver",
			"metadata": map[string]interface{}{
				"name": "cinder.csi.openstack.org",
			},
			"spec": map[string]interface{}{
				"attachRequired": true,
				"podInfoOnMount": true,
				"volumeLifecycleModes": []interface{}{
					"Persistent", "Ephemeral",
				},
			},
		},
	}
)
